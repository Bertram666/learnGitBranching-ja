The first command is git rebase -i HEAD~2
最初に打つコマンドはgit rebase -i HEAD~2

## Juggling Commits
## Commitsをやりくりする

Here's another situation that happens quite commonly. You have some changes (`newImage`) and another set of changes (`caption`) that are related, so they are stacked on top of each other in your repository (aka one after another).
開発中に頻繁に起こるケースをもう1つ考えます。ある変更（`newImage`）とまた別の変更（`caption`）があって、それらに依存関係があるとします。この一連の変更が一列に積み重なっているとします。

The tricky thing is that sometimes you need to make a small modification to an earlier commit. In this case, design wants us to change the dimensions of `newImage` slightly, even though that commit is way back in our history!!
ここでトリッキーなのは、以前のコミットに対して微修正をかけなければならないケースがあるということです。今回の教材でも、過去のコミットであるにも関わらず`newImage`ブランチに僅かな修正を加えるような設計の修正が入ったとしましょう。

We will overcome this difficulty by doing the following:
この困難な状況を、以下の手順で克服することを考えます：

We will re-order the commits so the one we want to change is on top with `git rebase -i`
`git rebase -i`を使って順番を変更する。これで、変更をかけたいコミットを一番先頭に持ってくる。

We will `commit --amend` to make the slight modification
`commit --amend`コマンドで僅かな変更を行う

Then we will re-order the commits back to how they were previously with `git rebase -i`
`git rebase -i`コマンドを再度使って、先頭に持ってきていたコミットを元に戻す

Finally, we will move master to this updated part of the tree to finish the level (via the method of your choosing)
最後に、レベルクリアのためにmasterブランチを先頭に持ってくる

There are many ways to accomplish this overall goal (I see you eye-ing cherry-pick), and we will see more of them later, but for now let's focus on this technique.
クリアのための方法はいくつもありますが（cherry-pickを使うこともできます）、別の回答はまた後程の章で見ることにんして、今回は上記の方法でやってみることにしましょう。

Lastly, pay attention to the goal state here -- since we move the commits twice, they both get an apostrophe appended. One more apostrophe is added for the commit we amend, which gives us the final form of the tree
最後に、ゴール時点での状態に気を付けてください。今回2回ほどコミットを動かしますから、コミットへのポインタにはアポストロフィ（'）が追加されます。commit --amendコマンドの実行でできたコミットには更にもう1つのアポストロフィが追加されます。
